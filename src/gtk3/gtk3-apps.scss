  //// Chromium & Chrome

// Chromium uses treeview background color for adressbar border
// and colored buttons background
window.background.chromium {
  treeview.view.cell:selected:focus {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  menuitem {
    border-radius: 0;
  }
}


  //// Evince & Gnome-documents

// Cant use light selection with dark text in light theme because evince overrides
// background color of evview:selected; background color needed for gnome-documents,
// otherwise it uses light selection color with light text
evview.content-view.view:selected  {
 background-color: $selected_bg_color;
 color: $selected_fg_color;
}


  //// Epiphany

// incognito mode

$incognito_base_color: if($variant == 'light', #d7e3f0, #2a3752);
$incognito_color: lighten($incognito_base_color, 5%);
$incognito_icon: 'user-not-tracked-symbolic';
$incognito_edge_color: if($variant == 'light', transparentize(white, 0.2), transparentize($fg_color, 0.93));
$incognito_borders_color: if($variant == 'light', darken($incognito_color, 15%), darken($incognito_color, 5%));
$incognito_dark_fill: mix($incognito_borders_color, $incognito_color, 50%);
$incognito_insensitive_fg_color: mix($fg_color, $incognito_color, 50%);

// automation mode
$automation_color: #ff9600;
$automation_edge_color: lighten($automation_color, 13%);

// utility function/macros and imports from the base GTK+ theme.

@function epiphany-themecolor($s) {
  @return unquote("@" + "#{$s}");
}

@function epiphany-gtkalpha($c,$a) {
  @return unquote("alpha(#{$c},#{$a})");
}


// Include base styling.

.incognito-mode {
  headerbar {
    @include headerbar_fill(darken($incognito_color, 10%), $incognito_edge_color, -gtk-icontheme($incognito_icon) 180px 0 / 64px 64px no-repeat);

    border-color: _border_color($incognito_borders_color);

    color: transparentize($fg_color, 0.8); // this is the color of the overlayed icon
  }

  actionbar {
    background: $incognito_color;

    > revealer > box {
      border-color: $incognito_borders_color;
    }
  }

  notebook > header {
    border-color: $incognito_borders_color;
    background-color: $incognito_dark_fill;

    > tabs > tab.reorderable-page {
      color: $incognito_insensitive_fg_color;

      button.flat {
        &:hover { color: currentColor; }
        & { color: epiphany-gtkalpha(currentColor, 0.3); }
      }

      &:hover {
        color: mix($incognito_insensitive_fg_color, $fg_color, 50%);
        border-color: transparentize($incognito_borders_color, 0.7);
        background-color: if($variant == 'light', transparentize(white, 0.9), transparentize(white, 0.97));
        box-shadow: inset 0 -1px $incognito_borders_color;
      }

      &:checked {
        color: $fg_color;
        border-color: transparentize($incognito_borders_color, 0.5);
        background-color: if($variant == 'light', transparentize(white, 0.7), transparentize(white, 0.94));
        box-shadow: inset 0 -1px $incognito_borders_color;

        &:hover { background-color: if($variant == 'light', transparentize(white, 0.6), transparentize(white, 0.92)); }
      }
    }

    > tabs > arrow:active {
      @include button(active, $incognito_color);
    }
  }

  headerbar, actionbar, notebook > header {
    > * {
      color: $fg_color;
    }

    button { // changing the headerbar background color requires changing widget borders accordingly
      @include button(normal, $incognito_color);

      &.flat, &.titlebutton { @include button(undecorated); }

      &.titlebutton { @include _button_text_shadow($fg_color, $incognito_color); }

      &:hover { @include button(hover, $incognito_color); }

      &:active, &:checked { @include button(active, $incognito_color); }

      &:disabled { @include button(insensitive, $incognito_color); }

      &:checked {
        background: if($variant == 'light', image(darken($incognito_color, 17%)), image(darken($incognito_color, 12%)));
        border-color: darken($incognito_borders_color, 15%);
      }
    }

    entry {
      border-color: _border_color($incognito_borders_color);

      &:focus {
        border-color: entry_focus_border($selected_bg_color);
        box-shadow: entry_focus_shadow($selected_bg_color);
      }
    }
  }
}

$epiphany_close_button_fg_color: if($variant == 'light', lighten($fg_color, 10%), darken($fg_color, 10%));
@mixin epiphany_close_button($bg:$bg_color, $fg:$epiphany_close_button_fg_color) {
  background: none;
  border: none;
  box-shadow: none;

  &:last-child {
    image {
      color: $fg;
      border: 1px solid transparent;
      border-radius: 2px;
    }

    &:hover image {
      @include button(normal, $bg, $fg);
      @include button(hover, $bg, $fg);
    }

    &:active image {
      @include button(normal, $bg, $fg);
      @include button(active, $bg, $fg);
    }
  }
}

.url_entry:not(:hover):not(:focus) {
  background-color: transparentize($base_color, 0.25);
}

.bookmark-tag-widget {
  padding-top: 0;
  padding-bottom: 0;

  image,
  label {
    color: $fg_color;
  }

  button {
    @include epiphany_close_button();
  }
}

.bookmark-tag-widget-selected {
  background-color: epiphany-themecolor(theme_selected_bg_color);

  image,
  label {
    color: epiphany-themecolor(theme_selected_fg_color);
  }

  button {
    @include epiphany_close_button($selected_bg_color, $selected_fg_color);
  }
}

.page-row-close-button {
  @include epiphany_close_button();

  row:hover & {
    @include epiphany_close_button($bg_color, $fg_color);
  }

  row:selected & {
    @include epiphany_close_button($selected_bg_color, $selected_fg_color);
  }

  row.narrow & image {
    padding: 6px;
  }
}

@keyframes epiphany_needs_attention_keyframes {
    0% {background-image: linear-gradient(to bottom, #fafafa, #ededed 40%,  #e0e0e0); border-color: epiphany-themecolor(borders); }
    /* can't do animation-direction, so holding the color on two keyframes */
    30% {background-image: linear-gradient(to bottom, epiphany-themecolor(theme_base_color), epiphany-themecolor(theme_base_color), epiphany-themecolor(theme_base_color)); border-color: epiphany-themecolor(theme_fg_color); }
    90% {background-image: linear-gradient(to bottom, epiphany-themecolor(theme_base_color), epiphany-themecolor(theme_base_color), epiphany-themecolor(theme_base_color)); border-color: epiphany-themecolor(theme_fg_color); }
    100% {background-image: linear-gradient(to bottom, #fafafa, #ededed 40%,  #e0e0e0); border-color: epiphany-themecolor(borders); }
}

.epiphany-downloads-button-needs-attention {
  animation: epiphany_needs_attention_keyframes 2s ease-in-out;
}

.epiphany-downloads-button-needs-attention-multiple {
  animation: epiphany_needs_attention_keyframes 3s ease-in-out;
  animation-iteration-count: 3;
}

dzlsuggestionpopover > revealer > box > elastic > scrolledwindow > viewport > list > row > box {
  margin-left: 3px;

  .title {
    margin-left: 6px;
  }
}

// Pinned tabs
.main-notebook {
  tab:not(.reorderable-page) {
    min-width: 16px;
  }

  header {
    &.top,
    &.bottom {
      tab {
        border-style: none solid;
      }
    }

    &.left,
    &.right {
      tab {
        border-style: solid none;
      }
    }
  }
}

window:not(.incognito-mode) .main-notebook tab:not(.reorderable-page) {
  &:hover {
    border-color: transparentize($borders_color, 0.7);
    background-color: transparentize($bg_color, 0.8);
  }

  &:checked {
    border-color: transparentize($borders_color, 0.5);
    background-color: transparentize($bg_color, 0.5);

    &:hover { background-color: transparentize($bg_color, 0.3); }
  }
}


  //// Firefox

#MozillaGtkWidget.background {
  text {
    &:selected {
      &:focus, & {
        @extend %selected_items_invert;
      }
    }
  }

  menuitem {
    border-radius: 0;
  }

  @if $size == regular {
    menuitem {
      margin-top: 2px;
      margin-bottom: 2px;
    }
  }
}


  //// Geary

row.geary-settings entry {
  @if $variant == 'light' {
    &:focus { box-shadow: inset 0 0 0 1px entry_focus_border(); }
    &:focus.error { box-shadow: inset 0 0 0 1px entry_focus_border($error_color); }
    &:focus.warning { box-shadow: inset 0 0 0 1px entry_focus_border($warning_color); }
  }
}


  //// Gedit

.open-document-selector {
  &-treeview {
    &:hover {
      background-color: transparentize($bg_color, 0.8);
      &:selected { background-color: $selected_bg_color; }
    }
  }

  &-name-label { color: $fg_color; }

  &-path-label {
    color: $backdrop_fg_color;
    font-size: smaller;
  }

  &-match {
    color: $fg_color;
    background-color: transparentize($warning_color, 0.6);
  }
}

.gedit-document-panel {
  background-color: $sidebar_bg_color;

  row {
    button.flat {
      @include button(undecorated);
      padding: 0;
      margin-top: 2px;
      margin-bottom: 2px;
      min-width: 20px;
      min-height: 20px;
      color: transparentize($fg_color, 0.7);
      &:hover { color: $fg_color; }
    }

    &:hover {
       button.flat {
         color: transparentize($fg_color, 0.5);
         &:hover { color: $fg_color; }
      }
    }

    &:selected {
      background: if($variant == 'light', transparentize(black, .9), transparentize(white, .94));

      label {
        color: $selected_fl_color;
        text-shadow: none;
      }

      button.flat {
        &:not(:active):not(:checked):not(:hover):not(disabled) {
          color: transparentize($selected_fl_color, 0.5);

          &.image { color: transparentize($selected_fl_color, 0.5); }
        }

        &:hover { @include button(undecorated); color: $selected_fl_color; }
      }

      &:hover { background: if($variant == 'light', transparentize(black, .87), transparentize(white, .92)); }
    }
  }

  &-group-row {
    border-top: 1px solid transparentize($fg_color, 0.7);
    &:first-child { border-top: 0px; }
  }
}

.gedit-side-panel-paned statusbar {
    border-top: 1px solid $borders_color;
}

.gedit-search-slider {
  background-color: $menu_color;
  padding: 6px;
  border-color: $borders_color;
  border-radius: 0 0 3px 3px;
  border-width: 0 1px 1px 1px;
  border-style: solid;
}

.gedit-search-entry-occurrences-tag {
  background-color: $base_color;
  background-image: none;
  color: mix($fg_color, $base_color, 70%);
  border: 0px;
  margin: 2px;
  padding: 2px;
}


  //// Gnome-calendar

headerbar button.sources-button { min-height: 36px; }


  //// Gnome-todo

.org-gnome-Todo {
  taskrow.activatable.new-task-row button.popup.toggle {
   border-left: 1px solid $borders-color;
  }
}


  //// Nautilus

.nautilus-window {
  &,
  & notebook,
  & notebook > stack {
    background: $base_color;
  }

  // Path bar
  .path-bar { /* undecorate the buttons */

    // nautilus 3.32 has separate class .nautilus-path-bar
    @if $gnome <= 3.30 {
      button {
        background-image: none;
        border-radius: 0;

        &:not(:checked) {
          image { opacity: 0.8; }
        }

        &:hover {
          box-shadow: inset 0 -2px if($variant == 'light', $borders_color, mix($bg_color, $fg_color, 60%));
        }

        @if $gnome <= 3.28 {
          border-color: transparent;
          background-color: transparent;
          box-shadow: none;
          text-shadow: none;
          -gtk-icon-shadow: none;

          &.text-button {
            label {
              padding-left: 6px;
              padding-right: 6px;
            }

            &.image-button {
              label { padding-left: 4px; }
            }
          }
        }

        @if $gnome >= 3.30 {
          border-width: 0px;
          margin: 0px;

          &:backdrop:checked { background-image: none; }
        }
      }
    }

    @if $gnome >= 3.30 {
      &-box {
        transition: border 200ms;
        transition: background-color 200ms;

        &.width-maximized {
          border: 1px $borders_color solid;
          background-color: $bg_color;
          border-radius: 2px;

          @if $gnome >= 3.32 {
            button {
              &:first-child {
                border-radius: 2px 0px 0px 2px;
                border-width: 0px 1px 0px 0px;
              }

              &:not(:first-child) {
                border-width: 0px 1px 0px 1px;
                border-radius: 0px 0px 0px 0px;
              }
            }
          }
        }
      }
    }
  }

  .floating-bar {
    padding: 0px;
    background-color: $menu_color;
    border-width: 1px;
    border-style: solid solid none;
    border-color: $borders_color;
    border-radius: 3px 3px 0 0;

    &.bottom.left { /* axes left border and border radius */
      border-left-style: none;
      border-top-left-radius: 0;
    }

    &.bottom.right { /* axes right border and border radius */
      border-right-style: none;
      border-top-right-radius: 0;
    }

    button {
      padding: 0px;
    }
  }

  .sidebar-row {
    &:selected {
      background: if($variant == 'light', transparentize(black, .9), transparentize(white, .94));
      text-shadow: none;
      -gtk-icon-shadow: none;

      &:hover, &.has-open-popup {
        background: if($variant == 'light', transparentize(black, .87), transparentize(white, .92));
      }

      &,
      & image,
      & label {
        color: $fg_color;
      }
    }
  }

  @if $gnome >= 3.32 {
    .entry-tag {
      margin-top: $nautilus_entry_tag_vertical_margin;
      margin-bottom: $nautilus_entry_tag_vertical_margin;
    }
  }

  @if $gnome >= 3.30 {
    .disclosure-button {
      padding: 4px;
    }
  }

  @if $gnome <= 3.28 {
    .search-bar {
      box-shadow: none;
    }

    // Workaround for the double border of the searchbar since we use a revealer which
    // always allocates at least 1 pixel
    searchbar { border-top: 1px solid $borders_color; }
    .searchbar-container { margin-top: -1px; }
  }
}

.nautilus {
  &-canvas-item {
    border-radius: 5px;
  }

  &-canvas-item.dim-label,
  &-list-dim-label {
    color: mix($fg_color, $bg_color, 50%);

    &:selected {
      color: mix($selected_fg_color, $selected_bg_color, 20%);
    }
  }
}

@if $gnome >= 3.32 {
  .nautilus-path-bar {
    button {
      margin: 0;
      &:not(:checked) { image { opacity: 0.8; }} // dim the icon when not checked

      &.text-button.image-button {
        // add padding before home/computer icon, reduce padding between icon and label
        image:first-child { padding-left: 8px; }
        label:first-child { padding-left: 12px; }
        label:not(:first-child) { padding-left: 2px; }
      }
    }
  }
}

// Toolbar

// Here we use the .button background-image colors from Adwaita, but ligthen them,
// since is not possible to use lighten () in common css.
@keyframes needs_attention_keyframes_nautilus {
    0% {background-image: image(darken($base_color, 7%)); border-color: $borders_color; }
    // can't do animation-direction, so holding the color on two keyframes
    30% {background-image: image($base_color); border-color: $borders_color; }
    90% {background-image: image($base_color); border-color: $borders_color; }
    100% {background-image: image(darken($base_color, 4%)); border-color: $borders_color; }
}

.nautilus-operations-button-needs-attention {
  animation: needs_attention_keyframes_nautilus 2s ease-in-out;

  &-multiple {
    animation: needs_attention_keyframes_nautilus 3s ease-in-out;
    animation-iteration-count: 3;
  }    
}

$disk_space_unknown: #888a85;
$disk_space_used: #729fcf;
$disk_space_free: #eeeeec;

.disk-space-display {
  border-style: solid;
  border-width: 2px;

  &.unknown {
    background-color: $disk_space_unknown;
    border-color: shade($disk_space_unknown, 0.7);

    @if $gnome >= 3.30 {
      color: $disk_space_unknown;

      &.border { color: shade($disk_space_unknown, 0.7); }
    }
  }

  &.used {
    background-color: $disk_space_used;
    border-color: shade($disk_space_used, 0.7);

    @if $gnome >= 3.30 {
      color: $disk_space_used;

      &.border { color: shade($disk_space_used, 0.7); }
    }
  }
  &.free {
    background-color: $disk_space_free;
    border-color: shade($disk_space_free, 0.7);

    @if $gnome >= 3.30 {
      color: $disk_space_free;

      &.border { color: shade($disk_space_free, 0.7); }
    }
  }
}

// View
.nautilus-list-view .view {
  border-bottom: 1px solid;
  border-bottom-color:  if($variant == 'light', $bg_color, mix($bg_color, $base_color, 60%));

  &:selected { border-bottom-color: $selected_bl_color; }

  // Hide superfluous treeview drop target indication
  &.dnd { border-style: none; }
}

$conflict_bg: #fef6b6;

.conflict-row {
  background: $conflict_bg;
  color: black;

  &:hover { background-color: shade($conflict_bg, 0.9); }

  &:selected {
    background: $selected_bg_color;
    color: $selected_fg_color;
  }
}

// Icon view
flowboxchild {
  &:selected { background-color: transparent; }

  @if $gnome <= 3.28 {
    & > widget > box > .icon-background,
    &:selected > widget > box > .icon-background {
      background-color: black;
      border-color: #4a90d9;
      border-style: solid;
      border-width: 0px;
    }

    & > widget > .icon-item-background { padding: 4px; }

    &:selected > widget > .icon-item-background {
      padding: 4px;
      background-color: #4a90d9;
      border-color: #4a90d9;
      border-style: solid;
      border-width: 0px;
      border-radius: 4px 4px 4px 4px;
    }
  }

  @if $gnome >= 3.30 {
    & > .icon-item-background {
      padding:4px;
    }
    &:selected > .icon-item-background {
      padding: 4px;
      background-color: #4a90d9;
      border-color: #4a90d9;
      border-style: solid;
      border-width: 0px;
      border-radius: 4px 4px 4px 4px;
    }
  }
}

@if $gnome >= 3.30 {
  // lounge: this can backfire to other gtk3 apps;
  .icon-background {
    background-color: black;
    border-color: #4a90d9;
    border-style: solid;
    border-width: 0px;
  }
}


  //// Polari

.polari-room-list row,
.polari-room-list row * {
  &:selected {
    background-color: $selected_bg_color;
    color: $selected_fg_color;

    label, label:selected { color: $selected_fg_color; }

    &:hover { background-color: darken($selected_bg_color, 5%); }

    &.has-open-popup { background-color: $selected_bg_color; }
  }
}


  //// Thunar

.thunar {
  scrolledwindow.standard-view {
    border-top-width: 0;
  }

  toolbar {
    border-bottom: 1px solid $borders_color;
  }

  scrolledwindow.sidebar {
    border-top: none;

    treeview.view {
      background: mix($bg_color, $base_color, 60%);

      &:hover { background: if($variant == 'light', darken($bg_color, 2%), lighten($bg_color, 2%)); }

      &:selected, &:active {
        background: if($variant == 'light', darken($bg_color, 5%), lighten($bg_color, 4%));
        &:hover { background: if($variant == 'light', darken($bg_color, 10%), lighten($bg_color, 7%)); }
      }
    }
  }
}
